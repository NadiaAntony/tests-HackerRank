def count_brackets(input_string):
  """
  input: string 
  output: int
  description: Given a string containing a number of open and close parentheses, find the count needed to balance them
  """
  scount=0
  ecount=0
  for i in input_string:
    if i=='(':
      scount = scount+1
    elif i==')':
      ecount = ecount+1
    else:
      pass
  return(abs(ecount-scount))

s

print(count_brackets(s))
#help(count_brackets)

def utest():
    """
    unit test to check:
    edge cases '' ' ' '('
    cheat sheet 0 0 1
    """
    assert count_brackets('') == 0
    assert count_brackets(' ') == 0
    assert count_brackets('(') == 1
    assert count_brackets('())') == 1

utest()
#help(utest)
